// SPDX-License-Identifier: MIT

pragma solidity ^0.8.16;

/**
 * @title Jackpot
 * @dev A contract that allows for the creation of a jackpot.
 */

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./JackpotComptroller.sol";

contract Jackpot is
    JackpotComptroller
{
    struct RandomResult {
        uint256 randomNumber; // random number generated by chainlink.
        uint256 nomalizedRandomNumber; // random number % size of the entries array. So between 0 and entries.length -1
    }

    // event sent when the random number is generated by the VRF
    event RandomNumberCreated(
        uint256 indexed idFromMetawin,
        uint256 randomNumber,
        uint256 normalizedRandomNumber
    );

    struct RaffleInfo {
        uint256 id; // raffleId
        uint256 size; // length of the entries array of that raffle
    }

    mapping(uint256 => RandomResult) public requests;
    // map the requestId created by chainlink with the raffle info passed as param when calling getRandomNumber()
    mapping(bytes32 => RaffleInfo) public chainlinkRaffleInfo;

    constructor(
          address _coordinator
        , address _linkToken
        , bytes32 _keyHash
        , uint256 _fee
    ) 
        JackpotComptroller(
              _coordinator
            , _linkToken
            , _keyHash
            , _fee
        )
    {

        

    }

    ////////////////////////// READ FUNCTIONS //////////////////////////

    function getJackpot(uint256 _jackpotId)
        public
        view
        returns (JackpotSchema jackpotSchema)
    {
        jackpots = jackpots[_jackpotId];
    }

    ///////////////////////// WRITE FUNCTIONS //////////////////////////
    function createJackpot() public payable { }

    function cancelJackpot() public { }

    function depositCollateral() public payable { }

    function withdrawCollateral() public payable { }

    function drawJackpot() public { }


}